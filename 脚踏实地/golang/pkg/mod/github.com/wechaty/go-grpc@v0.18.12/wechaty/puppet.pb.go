//*
//
// Wechaty Puppet gRPC Protocol Buffers
//  https://github.com/chatie/grpc/
//  Huan LI <zixia@zixia.net>
//  Apr 2018
//  License: Apache-2.0
//
// Google Protocol Buffers
//  Style Guide - https://developers.google.com/protocol-buffers/docs/style
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: puppet.proto

package wechaty

import (
	context "context"
	puppet "github.com/wechaty/go-grpc/wechaty/puppet"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of puppet/base.proto.

type PayloadType = puppet.PayloadType

const PayloadType_PAYLOAD_TYPE_UNKNOWN = puppet.PayloadType_PAYLOAD_TYPE_UNKNOWN
const PayloadType_PAYLOAD_TYPE_MESSAGE = puppet.PayloadType_PAYLOAD_TYPE_MESSAGE
const PayloadType_PAYLOAD_TYPE_CONTACT = puppet.PayloadType_PAYLOAD_TYPE_CONTACT
const PayloadType_PAYLOAD_TYPE_ROOM = puppet.PayloadType_PAYLOAD_TYPE_ROOM
const PayloadType_PAYLOAD_TYPE_ROOM_MEMBER = puppet.PayloadType_PAYLOAD_TYPE_ROOM_MEMBER
const PayloadType_PAYLOAD_TYPE_FRIENDSHIP = puppet.PayloadType_PAYLOAD_TYPE_FRIENDSHIP

var PayloadType_name = puppet.PayloadType_name
var PayloadType_value = puppet.PayloadType_value

type StartRequest = puppet.StartRequest
type StartResponse = puppet.StartResponse
type StopRequest = puppet.StopRequest
type StopResponse = puppet.StopResponse
type VersionRequest = puppet.VersionRequest
type VersionResponse = puppet.VersionResponse
type LogoutRequest = puppet.LogoutRequest
type LogoutResponse = puppet.LogoutResponse
type DingRequest = puppet.DingRequest
type DingResponse = puppet.DingResponse
type DirtyPayloadRequest = puppet.DirtyPayloadRequest
type DirtyPayloadResponse = puppet.DirtyPayloadResponse

// Symbols defined in public import of puppet/contact.proto.

type ContactGender = puppet.ContactGender

const ContactGender_CONTACT_GENDER_UNSPECIFIED = puppet.ContactGender_CONTACT_GENDER_UNSPECIFIED
const ContactGender_CONTACT_GENDER_MALE = puppet.ContactGender_CONTACT_GENDER_MALE
const ContactGender_CONTACT_GENDER_FEMALE = puppet.ContactGender_CONTACT_GENDER_FEMALE

var ContactGender_name = puppet.ContactGender_name
var ContactGender_value = puppet.ContactGender_value

type ContactType = puppet.ContactType

const ContactType_CONTACT_TYPE_UNSPECIFIED = puppet.ContactType_CONTACT_TYPE_UNSPECIFIED
const ContactType_CONTACT_TYPE_PERSONAL = puppet.ContactType_CONTACT_TYPE_PERSONAL
const ContactType_CONTACT_TYPE_OFFICIAL = puppet.ContactType_CONTACT_TYPE_OFFICIAL
const ContactType_CONTACT_TYPE_CORPORATION = puppet.ContactType_CONTACT_TYPE_CORPORATION

var ContactType_name = puppet.ContactType_name
var ContactType_value = puppet.ContactType_value

type ContactListRequest = puppet.ContactListRequest
type ContactListResponse = puppet.ContactListResponse
type ContactPayloadRequest = puppet.ContactPayloadRequest
type ContactPayloadResponse = puppet.ContactPayloadResponse
type ContactSelfQRCodeRequest = puppet.ContactSelfQRCodeRequest
type ContactSelfQRCodeResponse = puppet.ContactSelfQRCodeResponse
type ContactSelfNameRequest = puppet.ContactSelfNameRequest
type ContactSelfNameResponse = puppet.ContactSelfNameResponse
type ContactSelfSignatureRequest = puppet.ContactSelfSignatureRequest
type ContactSelfSignatureResponse = puppet.ContactSelfSignatureResponse
type ContactAliasRequest = puppet.ContactAliasRequest
type ContactAliasResponse = puppet.ContactAliasResponse
type ContactAvatarRequest = puppet.ContactAvatarRequest
type ContactAvatarResponse = puppet.ContactAvatarResponse
type ContactPhoneRequest = puppet.ContactPhoneRequest
type ContactPhoneResponse = puppet.ContactPhoneResponse
type ContactCorporationRemarkRequest = puppet.ContactCorporationRemarkRequest
type ContactCorporationRemarkResponse = puppet.ContactCorporationRemarkResponse
type ContactDescriptionRequest = puppet.ContactDescriptionRequest
type ContactDescriptionResponse = puppet.ContactDescriptionResponse

// Symbols defined in public import of puppet/event.proto.

type EventType = puppet.EventType

const EventType_EVENT_TYPE_UNSPECIFIED = puppet.EventType_EVENT_TYPE_UNSPECIFIED
const EventType_EVENT_TYPE_HEARTBEAT = puppet.EventType_EVENT_TYPE_HEARTBEAT
const EventType_EVENT_TYPE_MESSAGE = puppet.EventType_EVENT_TYPE_MESSAGE
const EventType_EVENT_TYPE_DONG = puppet.EventType_EVENT_TYPE_DONG
const EventType_EVENT_TYPE_ERROR = puppet.EventType_EVENT_TYPE_ERROR
const EventType_EVENT_TYPE_FRIENDSHIP = puppet.EventType_EVENT_TYPE_FRIENDSHIP
const EventType_EVENT_TYPE_ROOM_INVITE = puppet.EventType_EVENT_TYPE_ROOM_INVITE
const EventType_EVENT_TYPE_ROOM_JOIN = puppet.EventType_EVENT_TYPE_ROOM_JOIN
const EventType_EVENT_TYPE_ROOM_LEAVE = puppet.EventType_EVENT_TYPE_ROOM_LEAVE
const EventType_EVENT_TYPE_ROOM_TOPIC = puppet.EventType_EVENT_TYPE_ROOM_TOPIC
const EventType_EVENT_TYPE_SCAN = puppet.EventType_EVENT_TYPE_SCAN
const EventType_EVENT_TYPE_READY = puppet.EventType_EVENT_TYPE_READY
const EventType_EVENT_TYPE_RESET = puppet.EventType_EVENT_TYPE_RESET
const EventType_EVENT_TYPE_LOGIN = puppet.EventType_EVENT_TYPE_LOGIN
const EventType_EVENT_TYPE_LOGOUT = puppet.EventType_EVENT_TYPE_LOGOUT
const EventType_EVENT_TYPE_DIRTY = puppet.EventType_EVENT_TYPE_DIRTY

var EventType_name = puppet.EventType_name
var EventType_value = puppet.EventType_value

type EventRequest = puppet.EventRequest
type EventResponse = puppet.EventResponse

// Symbols defined in public import of puppet/file_box.proto.

type FileBoxChunk = puppet.FileBoxChunk
type FileBoxChunk_Data = puppet.FileBoxChunk_Data
type FileBoxChunk_Name = puppet.FileBoxChunk_Name

// Symbols defined in public import of puppet/friendship.proto.

type FriendshipType = puppet.FriendshipType

const FriendshipType_FRIENDSHIP_TYPE_UNSPECIFIED = puppet.FriendshipType_FRIENDSHIP_TYPE_UNSPECIFIED
const FriendshipType_FRIENDSHIP_TYPE_CONFIRM = puppet.FriendshipType_FRIENDSHIP_TYPE_CONFIRM
const FriendshipType_FRIENDSHIP_TYPE_RECEIVE = puppet.FriendshipType_FRIENDSHIP_TYPE_RECEIVE
const FriendshipType_FRIENDSHIP_TYPE_VERIFY = puppet.FriendshipType_FRIENDSHIP_TYPE_VERIFY

var FriendshipType_name = puppet.FriendshipType_name
var FriendshipType_value = puppet.FriendshipType_value

type FriendshipSceneType = puppet.FriendshipSceneType

const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_UNSPECIFIED = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_UNSPECIFIED
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQ = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQ
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_EMAIL = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_EMAIL
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_WEIXIN = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_WEIXIN
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQTBD = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQTBD
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_ROOM = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_ROOM
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_PHONE = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_PHONE
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_CARD = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_CARD
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_LOCATION = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_LOCATION
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_BOTTLE = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_BOTTLE
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_SHAKING = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_SHAKING
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QRCODE = puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QRCODE

var FriendshipSceneType_name = puppet.FriendshipSceneType_name
var FriendshipSceneType_value = puppet.FriendshipSceneType_value

type FriendshipPayloadRequest = puppet.FriendshipPayloadRequest
type FriendshipPayloadResponse = puppet.FriendshipPayloadResponse
type FriendshipSearchPhoneRequest = puppet.FriendshipSearchPhoneRequest
type FriendshipSearchPhoneResponse = puppet.FriendshipSearchPhoneResponse
type FriendshipSearchWeixinRequest = puppet.FriendshipSearchWeixinRequest
type FriendshipSearchWeixinResponse = puppet.FriendshipSearchWeixinResponse
type FriendshipAddRequest = puppet.FriendshipAddRequest
type FriendshipAddResponse = puppet.FriendshipAddResponse
type FriendshipAcceptRequest = puppet.FriendshipAcceptRequest
type FriendshipAcceptResponse = puppet.FriendshipAcceptResponse

// Symbols defined in public import of puppet/message.proto.

type MessageType = puppet.MessageType

const MessageType_MESSAGE_TYPE_UNSPECIFIED = puppet.MessageType_MESSAGE_TYPE_UNSPECIFIED
const MessageType_MESSAGE_TYPE_ATTACHMENT = puppet.MessageType_MESSAGE_TYPE_ATTACHMENT
const MessageType_MESSAGE_TYPE_AUDIO = puppet.MessageType_MESSAGE_TYPE_AUDIO
const MessageType_MESSAGE_TYPE_CONTACT = puppet.MessageType_MESSAGE_TYPE_CONTACT
const MessageType_MESSAGE_TYPE_EMOTICON = puppet.MessageType_MESSAGE_TYPE_EMOTICON
const MessageType_MESSAGE_TYPE_IMAGE = puppet.MessageType_MESSAGE_TYPE_IMAGE
const MessageType_MESSAGE_TYPE_TEXT = puppet.MessageType_MESSAGE_TYPE_TEXT
const MessageType_MESSAGE_TYPE_VIDEO = puppet.MessageType_MESSAGE_TYPE_VIDEO
const MessageType_MESSAGE_TYPE_CHAT_HISTORY = puppet.MessageType_MESSAGE_TYPE_CHAT_HISTORY
const MessageType_MESSAGE_TYPE_LOCATION = puppet.MessageType_MESSAGE_TYPE_LOCATION
const MessageType_MESSAGE_TYPE_MINI_PROGRAM = puppet.MessageType_MESSAGE_TYPE_MINI_PROGRAM
const MessageType_MESSAGE_TYPE_TRANSFER = puppet.MessageType_MESSAGE_TYPE_TRANSFER
const MessageType_MESSAGE_TYPE_RED_ENVELOPE = puppet.MessageType_MESSAGE_TYPE_RED_ENVELOPE
const MessageType_MESSAGE_TYPE_RECALLED = puppet.MessageType_MESSAGE_TYPE_RECALLED
const MessageType_MESSAGE_TYPE_URL = puppet.MessageType_MESSAGE_TYPE_URL

var MessageType_name = puppet.MessageType_name
var MessageType_value = puppet.MessageType_value

type ImageType = puppet.ImageType

const ImageType_IMAGE_TYPE_UNSPECIFIED = puppet.ImageType_IMAGE_TYPE_UNSPECIFIED
const ImageType_IMAGE_TYPE_THUMBNAIL = puppet.ImageType_IMAGE_TYPE_THUMBNAIL
const ImageType_IMAGE_TYPE_HD = puppet.ImageType_IMAGE_TYPE_HD
const ImageType_IMAGE_TYPE_ARTWORK = puppet.ImageType_IMAGE_TYPE_ARTWORK

var ImageType_name = puppet.ImageType_name
var ImageType_value = puppet.ImageType_value

type MessagePayloadRequest = puppet.MessagePayloadRequest
type MessagePayloadResponse = puppet.MessagePayloadResponse
type MessageImageRequest = puppet.MessageImageRequest
type MessageImageResponse = puppet.MessageImageResponse
type MessageImageStreamRequest = puppet.MessageImageStreamRequest
type MessageImageStreamResponse = puppet.MessageImageStreamResponse
type MessageContactRequest = puppet.MessageContactRequest
type MessageContactResponse = puppet.MessageContactResponse
type MessageFileRequest = puppet.MessageFileRequest
type MessageFileResponse = puppet.MessageFileResponse
type MessageFileStreamRequest = puppet.MessageFileStreamRequest
type MessageFileStreamResponse = puppet.MessageFileStreamResponse
type MessageMiniProgramRequest = puppet.MessageMiniProgramRequest
type MessageMiniProgramResponse = puppet.MessageMiniProgramResponse
type MessageUrlRequest = puppet.MessageUrlRequest
type MessageUrlResponse = puppet.MessageUrlResponse
type MessageSendContactRequest = puppet.MessageSendContactRequest
type MessageSendContactResponse = puppet.MessageSendContactResponse
type MessageSendFileRequest = puppet.MessageSendFileRequest
type MessageSendFileResponse = puppet.MessageSendFileResponse
type MessageSendFileStreamRequest = puppet.MessageSendFileStreamRequest
type MessageSendFileStreamRequest_ConversationId = puppet.MessageSendFileStreamRequest_ConversationId
type MessageSendFileStreamRequest_FileBoxChunk = puppet.MessageSendFileStreamRequest_FileBoxChunk
type MessageSendFileStreamResponse = puppet.MessageSendFileStreamResponse
type MessageSendTextRequest = puppet.MessageSendTextRequest
type MessageSendTextResponse = puppet.MessageSendTextResponse
type MessageSendMiniProgramRequest = puppet.MessageSendMiniProgramRequest
type MessageSendMiniProgramResponse = puppet.MessageSendMiniProgramResponse
type MessageSendUrlRequest = puppet.MessageSendUrlRequest
type MessageSendUrlResponse = puppet.MessageSendUrlResponse
type MessageRecallRequest = puppet.MessageRecallRequest
type MessageRecallResponse = puppet.MessageRecallResponse

// Symbols defined in public import of puppet/room.proto.

type RoomListRequest = puppet.RoomListRequest
type RoomListResponse = puppet.RoomListResponse
type RoomPayloadRequest = puppet.RoomPayloadRequest
type RoomPayloadResponse = puppet.RoomPayloadResponse
type RoomAddRequest = puppet.RoomAddRequest
type RoomAddResponse = puppet.RoomAddResponse
type RoomAvatarRequest = puppet.RoomAvatarRequest
type RoomAvatarResponse = puppet.RoomAvatarResponse
type RoomCreateRequest = puppet.RoomCreateRequest
type RoomCreateResponse = puppet.RoomCreateResponse
type RoomDelRequest = puppet.RoomDelRequest
type RoomDelResponse = puppet.RoomDelResponse
type RoomQuitRequest = puppet.RoomQuitRequest
type RoomQuitResponse = puppet.RoomQuitResponse
type RoomTopicRequest = puppet.RoomTopicRequest
type RoomTopicResponse = puppet.RoomTopicResponse
type RoomQRCodeRequest = puppet.RoomQRCodeRequest
type RoomQRCodeResponse = puppet.RoomQRCodeResponse
type RoomAnnounceRequest = puppet.RoomAnnounceRequest
type RoomAnnounceResponse = puppet.RoomAnnounceResponse

// Symbols defined in public import of puppet/room_invitation.proto.

type RoomInvitationPayloadRequest = puppet.RoomInvitationPayloadRequest
type RoomInvitationPayloadResponse = puppet.RoomInvitationPayloadResponse
type RoomInvitationAcceptRequest = puppet.RoomInvitationAcceptRequest
type RoomInvitationAcceptResponse = puppet.RoomInvitationAcceptResponse

// Symbols defined in public import of puppet/room_member.proto.

type RoomMemberPayloadRequest = puppet.RoomMemberPayloadRequest
type RoomMemberPayloadResponse = puppet.RoomMemberPayloadResponse
type RoomMemberListRequest = puppet.RoomMemberListRequest
type RoomMemberListResponse = puppet.RoomMemberListResponse

// Symbols defined in public import of puppet/tag.proto.

type TagContactAddRequest = puppet.TagContactAddRequest
type TagContactAddResponse = puppet.TagContactAddResponse
type TagContactRemoveRequest = puppet.TagContactRemoveRequest
type TagContactRemoveResponse = puppet.TagContactRemoveResponse
type TagContactDeleteRequest = puppet.TagContactDeleteRequest
type TagContactDeleteResponse = puppet.TagContactDeleteResponse
type TagContactListRequest = puppet.TagContactListRequest
type TagContactListResponse = puppet.TagContactListResponse

var File_puppet_proto protoreflect.FileDescriptor

var file_puppet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x1a, 0x11, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x62, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2f, 0x74, 0x61,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x84, 0x2a, 0x0a, 0x06, 0x50, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x1b, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x04, 0x44, 0x69,
	0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x44, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x2e, 0x44, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x0c, 0x44, 0x69, 0x72, 0x74, 0x79,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x44, 0x69,
	0x72, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x66, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75,
	0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75,
	0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x23,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75,
	0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x24, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x15, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x16, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x65, 0x69, 0x78, 0x69, 0x6e,
	0x12, 0x2d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x57, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x12, 0x24, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x10, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75,
	0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x12, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x12,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75,
	0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x78, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x64, 0x0a, 0x0f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x25,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x12, 0x24, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x52, 0x6f,
	0x6f, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65,
	0x6c, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x69, 0x74,
	0x12, 0x1f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x52, 0x6f, 0x6f,
	0x6d, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x52, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x12, 0x23, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x15,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e,
	0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75,
	0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x14, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2b, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x12, 0x24, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x27, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2e, 0x70,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c,
	0x0a, 0x16, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x79, 0x50, 0x00, 0x50, 0x01,
	0x50, 0x02, 0x50, 0x03, 0x50, 0x04, 0x50, 0x05, 0x50, 0x06, 0x50, 0x07, 0x50, 0x08, 0x50, 0x09,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_puppet_proto_goTypes = []interface{}{
	(*puppet.StartRequest)(nil),                     // 0: wechaty.puppet.StartRequest
	(*puppet.StopRequest)(nil),                      // 1: wechaty.puppet.StopRequest
	(*puppet.LogoutRequest)(nil),                    // 2: wechaty.puppet.LogoutRequest
	(*puppet.DingRequest)(nil),                      // 3: wechaty.puppet.DingRequest
	(*puppet.VersionRequest)(nil),                   // 4: wechaty.puppet.VersionRequest
	(*puppet.EventRequest)(nil),                     // 5: wechaty.puppet.EventRequest
	(*puppet.DirtyPayloadRequest)(nil),              // 6: wechaty.puppet.DirtyPayloadRequest
	(*puppet.ContactSelfQRCodeRequest)(nil),         // 7: wechaty.puppet.ContactSelfQRCodeRequest
	(*puppet.ContactSelfNameRequest)(nil),           // 8: wechaty.puppet.ContactSelfNameRequest
	(*puppet.ContactSelfSignatureRequest)(nil),      // 9: wechaty.puppet.ContactSelfSignatureRequest
	(*puppet.ContactPayloadRequest)(nil),            // 10: wechaty.puppet.ContactPayloadRequest
	(*puppet.ContactAliasRequest)(nil),              // 11: wechaty.puppet.ContactAliasRequest
	(*puppet.ContactAvatarRequest)(nil),             // 12: wechaty.puppet.ContactAvatarRequest
	(*puppet.ContactPhoneRequest)(nil),              // 13: wechaty.puppet.ContactPhoneRequest
	(*puppet.ContactCorporationRemarkRequest)(nil),  // 14: wechaty.puppet.ContactCorporationRemarkRequest
	(*puppet.ContactDescriptionRequest)(nil),        // 15: wechaty.puppet.ContactDescriptionRequest
	(*puppet.ContactListRequest)(nil),               // 16: wechaty.puppet.ContactListRequest
	(*puppet.FriendshipPayloadRequest)(nil),         // 17: wechaty.puppet.FriendshipPayloadRequest
	(*puppet.FriendshipSearchPhoneRequest)(nil),     // 18: wechaty.puppet.FriendshipSearchPhoneRequest
	(*puppet.FriendshipSearchWeixinRequest)(nil),    // 19: wechaty.puppet.FriendshipSearchWeixinRequest
	(*puppet.FriendshipAddRequest)(nil),             // 20: wechaty.puppet.FriendshipAddRequest
	(*puppet.FriendshipAcceptRequest)(nil),          // 21: wechaty.puppet.FriendshipAcceptRequest
	(*puppet.MessageFileRequest)(nil),               // 22: wechaty.puppet.MessageFileRequest
	(*puppet.MessageImageRequest)(nil),              // 23: wechaty.puppet.MessageImageRequest
	(*puppet.MessageSendFileRequest)(nil),           // 24: wechaty.puppet.MessageSendFileRequest
	(*puppet.MessagePayloadRequest)(nil),            // 25: wechaty.puppet.MessagePayloadRequest
	(*puppet.MessageContactRequest)(nil),            // 26: wechaty.puppet.MessageContactRequest
	(*puppet.MessageFileStreamRequest)(nil),         // 27: wechaty.puppet.MessageFileStreamRequest
	(*puppet.MessageImageStreamRequest)(nil),        // 28: wechaty.puppet.MessageImageStreamRequest
	(*puppet.MessageMiniProgramRequest)(nil),        // 29: wechaty.puppet.MessageMiniProgramRequest
	(*puppet.MessageUrlRequest)(nil),                // 30: wechaty.puppet.MessageUrlRequest
	(*puppet.MessageSendContactRequest)(nil),        // 31: wechaty.puppet.MessageSendContactRequest
	(*puppet.MessageSendFileStreamRequest)(nil),     // 32: wechaty.puppet.MessageSendFileStreamRequest
	(*puppet.MessageSendTextRequest)(nil),           // 33: wechaty.puppet.MessageSendTextRequest
	(*puppet.MessageSendMiniProgramRequest)(nil),    // 34: wechaty.puppet.MessageSendMiniProgramRequest
	(*puppet.MessageSendUrlRequest)(nil),            // 35: wechaty.puppet.MessageSendUrlRequest
	(*puppet.MessageRecallRequest)(nil),             // 36: wechaty.puppet.MessageRecallRequest
	(*puppet.RoomPayloadRequest)(nil),               // 37: wechaty.puppet.RoomPayloadRequest
	(*puppet.RoomListRequest)(nil),                  // 38: wechaty.puppet.RoomListRequest
	(*puppet.RoomAddRequest)(nil),                   // 39: wechaty.puppet.RoomAddRequest
	(*puppet.RoomAvatarRequest)(nil),                // 40: wechaty.puppet.RoomAvatarRequest
	(*puppet.RoomCreateRequest)(nil),                // 41: wechaty.puppet.RoomCreateRequest
	(*puppet.RoomDelRequest)(nil),                   // 42: wechaty.puppet.RoomDelRequest
	(*puppet.RoomQuitRequest)(nil),                  // 43: wechaty.puppet.RoomQuitRequest
	(*puppet.RoomTopicRequest)(nil),                 // 44: wechaty.puppet.RoomTopicRequest
	(*puppet.RoomQRCodeRequest)(nil),                // 45: wechaty.puppet.RoomQRCodeRequest
	(*puppet.RoomAnnounceRequest)(nil),              // 46: wechaty.puppet.RoomAnnounceRequest
	(*puppet.RoomMemberPayloadRequest)(nil),         // 47: wechaty.puppet.RoomMemberPayloadRequest
	(*puppet.RoomMemberListRequest)(nil),            // 48: wechaty.puppet.RoomMemberListRequest
	(*puppet.RoomInvitationPayloadRequest)(nil),     // 49: wechaty.puppet.RoomInvitationPayloadRequest
	(*puppet.RoomInvitationAcceptRequest)(nil),      // 50: wechaty.puppet.RoomInvitationAcceptRequest
	(*puppet.TagContactAddRequest)(nil),             // 51: wechaty.puppet.TagContactAddRequest
	(*puppet.TagContactRemoveRequest)(nil),          // 52: wechaty.puppet.TagContactRemoveRequest
	(*puppet.TagContactDeleteRequest)(nil),          // 53: wechaty.puppet.TagContactDeleteRequest
	(*puppet.TagContactListRequest)(nil),            // 54: wechaty.puppet.TagContactListRequest
	(*puppet.StartResponse)(nil),                    // 55: wechaty.puppet.StartResponse
	(*puppet.StopResponse)(nil),                     // 56: wechaty.puppet.StopResponse
	(*puppet.LogoutResponse)(nil),                   // 57: wechaty.puppet.LogoutResponse
	(*puppet.DingResponse)(nil),                     // 58: wechaty.puppet.DingResponse
	(*puppet.VersionResponse)(nil),                  // 59: wechaty.puppet.VersionResponse
	(*puppet.EventResponse)(nil),                    // 60: wechaty.puppet.EventResponse
	(*puppet.DirtyPayloadResponse)(nil),             // 61: wechaty.puppet.DirtyPayloadResponse
	(*puppet.ContactSelfQRCodeResponse)(nil),        // 62: wechaty.puppet.ContactSelfQRCodeResponse
	(*puppet.ContactSelfNameResponse)(nil),          // 63: wechaty.puppet.ContactSelfNameResponse
	(*puppet.ContactSelfSignatureResponse)(nil),     // 64: wechaty.puppet.ContactSelfSignatureResponse
	(*puppet.ContactPayloadResponse)(nil),           // 65: wechaty.puppet.ContactPayloadResponse
	(*puppet.ContactAliasResponse)(nil),             // 66: wechaty.puppet.ContactAliasResponse
	(*puppet.ContactAvatarResponse)(nil),            // 67: wechaty.puppet.ContactAvatarResponse
	(*puppet.ContactPhoneResponse)(nil),             // 68: wechaty.puppet.ContactPhoneResponse
	(*puppet.ContactCorporationRemarkResponse)(nil), // 69: wechaty.puppet.ContactCorporationRemarkResponse
	(*puppet.ContactDescriptionResponse)(nil),       // 70: wechaty.puppet.ContactDescriptionResponse
	(*puppet.ContactListResponse)(nil),              // 71: wechaty.puppet.ContactListResponse
	(*puppet.FriendshipPayloadResponse)(nil),        // 72: wechaty.puppet.FriendshipPayloadResponse
	(*puppet.FriendshipSearchPhoneResponse)(nil),    // 73: wechaty.puppet.FriendshipSearchPhoneResponse
	(*puppet.FriendshipSearchWeixinResponse)(nil),   // 74: wechaty.puppet.FriendshipSearchWeixinResponse
	(*puppet.FriendshipAddResponse)(nil),            // 75: wechaty.puppet.FriendshipAddResponse
	(*puppet.FriendshipAcceptResponse)(nil),         // 76: wechaty.puppet.FriendshipAcceptResponse
	(*puppet.MessageFileResponse)(nil),              // 77: wechaty.puppet.MessageFileResponse
	(*puppet.MessageImageResponse)(nil),             // 78: wechaty.puppet.MessageImageResponse
	(*puppet.MessageSendFileResponse)(nil),          // 79: wechaty.puppet.MessageSendFileResponse
	(*puppet.MessagePayloadResponse)(nil),           // 80: wechaty.puppet.MessagePayloadResponse
	(*puppet.MessageContactResponse)(nil),           // 81: wechaty.puppet.MessageContactResponse
	(*puppet.MessageFileStreamResponse)(nil),        // 82: wechaty.puppet.MessageFileStreamResponse
	(*puppet.MessageImageStreamResponse)(nil),       // 83: wechaty.puppet.MessageImageStreamResponse
	(*puppet.MessageMiniProgramResponse)(nil),       // 84: wechaty.puppet.MessageMiniProgramResponse
	(*puppet.MessageUrlResponse)(nil),               // 85: wechaty.puppet.MessageUrlResponse
	(*puppet.MessageSendContactResponse)(nil),       // 86: wechaty.puppet.MessageSendContactResponse
	(*puppet.MessageSendFileStreamResponse)(nil),    // 87: wechaty.puppet.MessageSendFileStreamResponse
	(*puppet.MessageSendTextResponse)(nil),          // 88: wechaty.puppet.MessageSendTextResponse
	(*puppet.MessageSendMiniProgramResponse)(nil),   // 89: wechaty.puppet.MessageSendMiniProgramResponse
	(*puppet.MessageSendUrlResponse)(nil),           // 90: wechaty.puppet.MessageSendUrlResponse
	(*puppet.MessageRecallResponse)(nil),            // 91: wechaty.puppet.MessageRecallResponse
	(*puppet.RoomPayloadResponse)(nil),              // 92: wechaty.puppet.RoomPayloadResponse
	(*puppet.RoomListResponse)(nil),                 // 93: wechaty.puppet.RoomListResponse
	(*puppet.RoomAddResponse)(nil),                  // 94: wechaty.puppet.RoomAddResponse
	(*puppet.RoomAvatarResponse)(nil),               // 95: wechaty.puppet.RoomAvatarResponse
	(*puppet.RoomCreateResponse)(nil),               // 96: wechaty.puppet.RoomCreateResponse
	(*puppet.RoomDelResponse)(nil),                  // 97: wechaty.puppet.RoomDelResponse
	(*puppet.RoomQuitResponse)(nil),                 // 98: wechaty.puppet.RoomQuitResponse
	(*puppet.RoomTopicResponse)(nil),                // 99: wechaty.puppet.RoomTopicResponse
	(*puppet.RoomQRCodeResponse)(nil),               // 100: wechaty.puppet.RoomQRCodeResponse
	(*puppet.RoomAnnounceResponse)(nil),             // 101: wechaty.puppet.RoomAnnounceResponse
	(*puppet.RoomMemberPayloadResponse)(nil),        // 102: wechaty.puppet.RoomMemberPayloadResponse
	(*puppet.RoomMemberListResponse)(nil),           // 103: wechaty.puppet.RoomMemberListResponse
	(*puppet.RoomInvitationPayloadResponse)(nil),    // 104: wechaty.puppet.RoomInvitationPayloadResponse
	(*puppet.RoomInvitationAcceptResponse)(nil),     // 105: wechaty.puppet.RoomInvitationAcceptResponse
	(*puppet.TagContactAddResponse)(nil),            // 106: wechaty.puppet.TagContactAddResponse
	(*puppet.TagContactRemoveResponse)(nil),         // 107: wechaty.puppet.TagContactRemoveResponse
	(*puppet.TagContactDeleteResponse)(nil),         // 108: wechaty.puppet.TagContactDeleteResponse
	(*puppet.TagContactListResponse)(nil),           // 109: wechaty.puppet.TagContactListResponse
}
var file_puppet_proto_depIdxs = []int32{
	0,   // 0: wechaty.Puppet.Start:input_type -> wechaty.puppet.StartRequest
	1,   // 1: wechaty.Puppet.Stop:input_type -> wechaty.puppet.StopRequest
	2,   // 2: wechaty.Puppet.Logout:input_type -> wechaty.puppet.LogoutRequest
	3,   // 3: wechaty.Puppet.Ding:input_type -> wechaty.puppet.DingRequest
	4,   // 4: wechaty.Puppet.Version:input_type -> wechaty.puppet.VersionRequest
	5,   // 5: wechaty.Puppet.Event:input_type -> wechaty.puppet.EventRequest
	6,   // 6: wechaty.Puppet.DirtyPayload:input_type -> wechaty.puppet.DirtyPayloadRequest
	7,   // 7: wechaty.Puppet.ContactSelfQRCode:input_type -> wechaty.puppet.ContactSelfQRCodeRequest
	8,   // 8: wechaty.Puppet.ContactSelfName:input_type -> wechaty.puppet.ContactSelfNameRequest
	9,   // 9: wechaty.Puppet.ContactSelfSignature:input_type -> wechaty.puppet.ContactSelfSignatureRequest
	10,  // 10: wechaty.Puppet.ContactPayload:input_type -> wechaty.puppet.ContactPayloadRequest
	11,  // 11: wechaty.Puppet.ContactAlias:input_type -> wechaty.puppet.ContactAliasRequest
	12,  // 12: wechaty.Puppet.ContactAvatar:input_type -> wechaty.puppet.ContactAvatarRequest
	13,  // 13: wechaty.Puppet.ContactPhone:input_type -> wechaty.puppet.ContactPhoneRequest
	14,  // 14: wechaty.Puppet.ContactCorporationRemark:input_type -> wechaty.puppet.ContactCorporationRemarkRequest
	15,  // 15: wechaty.Puppet.ContactDescription:input_type -> wechaty.puppet.ContactDescriptionRequest
	16,  // 16: wechaty.Puppet.ContactList:input_type -> wechaty.puppet.ContactListRequest
	17,  // 17: wechaty.Puppet.FriendshipPayload:input_type -> wechaty.puppet.FriendshipPayloadRequest
	18,  // 18: wechaty.Puppet.FriendshipSearchPhone:input_type -> wechaty.puppet.FriendshipSearchPhoneRequest
	19,  // 19: wechaty.Puppet.FriendshipSearchWeixin:input_type -> wechaty.puppet.FriendshipSearchWeixinRequest
	20,  // 20: wechaty.Puppet.FriendshipAdd:input_type -> wechaty.puppet.FriendshipAddRequest
	21,  // 21: wechaty.Puppet.FriendshipAccept:input_type -> wechaty.puppet.FriendshipAcceptRequest
	22,  // 22: wechaty.Puppet.MessageFile:input_type -> wechaty.puppet.MessageFileRequest
	23,  // 23: wechaty.Puppet.MessageImage:input_type -> wechaty.puppet.MessageImageRequest
	24,  // 24: wechaty.Puppet.MessageSendFile:input_type -> wechaty.puppet.MessageSendFileRequest
	25,  // 25: wechaty.Puppet.MessagePayload:input_type -> wechaty.puppet.MessagePayloadRequest
	26,  // 26: wechaty.Puppet.MessageContact:input_type -> wechaty.puppet.MessageContactRequest
	27,  // 27: wechaty.Puppet.MessageFileStream:input_type -> wechaty.puppet.MessageFileStreamRequest
	28,  // 28: wechaty.Puppet.MessageImageStream:input_type -> wechaty.puppet.MessageImageStreamRequest
	29,  // 29: wechaty.Puppet.MessageMiniProgram:input_type -> wechaty.puppet.MessageMiniProgramRequest
	30,  // 30: wechaty.Puppet.MessageUrl:input_type -> wechaty.puppet.MessageUrlRequest
	31,  // 31: wechaty.Puppet.MessageSendContact:input_type -> wechaty.puppet.MessageSendContactRequest
	32,  // 32: wechaty.Puppet.MessageSendFileStream:input_type -> wechaty.puppet.MessageSendFileStreamRequest
	33,  // 33: wechaty.Puppet.MessageSendText:input_type -> wechaty.puppet.MessageSendTextRequest
	34,  // 34: wechaty.Puppet.MessageSendMiniProgram:input_type -> wechaty.puppet.MessageSendMiniProgramRequest
	35,  // 35: wechaty.Puppet.MessageSendUrl:input_type -> wechaty.puppet.MessageSendUrlRequest
	36,  // 36: wechaty.Puppet.MessageRecall:input_type -> wechaty.puppet.MessageRecallRequest
	37,  // 37: wechaty.Puppet.RoomPayload:input_type -> wechaty.puppet.RoomPayloadRequest
	38,  // 38: wechaty.Puppet.RoomList:input_type -> wechaty.puppet.RoomListRequest
	39,  // 39: wechaty.Puppet.RoomAdd:input_type -> wechaty.puppet.RoomAddRequest
	40,  // 40: wechaty.Puppet.RoomAvatar:input_type -> wechaty.puppet.RoomAvatarRequest
	41,  // 41: wechaty.Puppet.RoomCreate:input_type -> wechaty.puppet.RoomCreateRequest
	42,  // 42: wechaty.Puppet.RoomDel:input_type -> wechaty.puppet.RoomDelRequest
	43,  // 43: wechaty.Puppet.RoomQuit:input_type -> wechaty.puppet.RoomQuitRequest
	44,  // 44: wechaty.Puppet.RoomTopic:input_type -> wechaty.puppet.RoomTopicRequest
	45,  // 45: wechaty.Puppet.RoomQRCode:input_type -> wechaty.puppet.RoomQRCodeRequest
	46,  // 46: wechaty.Puppet.RoomAnnounce:input_type -> wechaty.puppet.RoomAnnounceRequest
	47,  // 47: wechaty.Puppet.RoomMemberPayload:input_type -> wechaty.puppet.RoomMemberPayloadRequest
	48,  // 48: wechaty.Puppet.RoomMemberList:input_type -> wechaty.puppet.RoomMemberListRequest
	49,  // 49: wechaty.Puppet.RoomInvitationPayload:input_type -> wechaty.puppet.RoomInvitationPayloadRequest
	50,  // 50: wechaty.Puppet.RoomInvitationAccept:input_type -> wechaty.puppet.RoomInvitationAcceptRequest
	51,  // 51: wechaty.Puppet.TagContactAdd:input_type -> wechaty.puppet.TagContactAddRequest
	52,  // 52: wechaty.Puppet.TagContactRemove:input_type -> wechaty.puppet.TagContactRemoveRequest
	53,  // 53: wechaty.Puppet.TagContactDelete:input_type -> wechaty.puppet.TagContactDeleteRequest
	54,  // 54: wechaty.Puppet.TagContactList:input_type -> wechaty.puppet.TagContactListRequest
	55,  // 55: wechaty.Puppet.Start:output_type -> wechaty.puppet.StartResponse
	56,  // 56: wechaty.Puppet.Stop:output_type -> wechaty.puppet.StopResponse
	57,  // 57: wechaty.Puppet.Logout:output_type -> wechaty.puppet.LogoutResponse
	58,  // 58: wechaty.Puppet.Ding:output_type -> wechaty.puppet.DingResponse
	59,  // 59: wechaty.Puppet.Version:output_type -> wechaty.puppet.VersionResponse
	60,  // 60: wechaty.Puppet.Event:output_type -> wechaty.puppet.EventResponse
	61,  // 61: wechaty.Puppet.DirtyPayload:output_type -> wechaty.puppet.DirtyPayloadResponse
	62,  // 62: wechaty.Puppet.ContactSelfQRCode:output_type -> wechaty.puppet.ContactSelfQRCodeResponse
	63,  // 63: wechaty.Puppet.ContactSelfName:output_type -> wechaty.puppet.ContactSelfNameResponse
	64,  // 64: wechaty.Puppet.ContactSelfSignature:output_type -> wechaty.puppet.ContactSelfSignatureResponse
	65,  // 65: wechaty.Puppet.ContactPayload:output_type -> wechaty.puppet.ContactPayloadResponse
	66,  // 66: wechaty.Puppet.ContactAlias:output_type -> wechaty.puppet.ContactAliasResponse
	67,  // 67: wechaty.Puppet.ContactAvatar:output_type -> wechaty.puppet.ContactAvatarResponse
	68,  // 68: wechaty.Puppet.ContactPhone:output_type -> wechaty.puppet.ContactPhoneResponse
	69,  // 69: wechaty.Puppet.ContactCorporationRemark:output_type -> wechaty.puppet.ContactCorporationRemarkResponse
	70,  // 70: wechaty.Puppet.ContactDescription:output_type -> wechaty.puppet.ContactDescriptionResponse
	71,  // 71: wechaty.Puppet.ContactList:output_type -> wechaty.puppet.ContactListResponse
	72,  // 72: wechaty.Puppet.FriendshipPayload:output_type -> wechaty.puppet.FriendshipPayloadResponse
	73,  // 73: wechaty.Puppet.FriendshipSearchPhone:output_type -> wechaty.puppet.FriendshipSearchPhoneResponse
	74,  // 74: wechaty.Puppet.FriendshipSearchWeixin:output_type -> wechaty.puppet.FriendshipSearchWeixinResponse
	75,  // 75: wechaty.Puppet.FriendshipAdd:output_type -> wechaty.puppet.FriendshipAddResponse
	76,  // 76: wechaty.Puppet.FriendshipAccept:output_type -> wechaty.puppet.FriendshipAcceptResponse
	77,  // 77: wechaty.Puppet.MessageFile:output_type -> wechaty.puppet.MessageFileResponse
	78,  // 78: wechaty.Puppet.MessageImage:output_type -> wechaty.puppet.MessageImageResponse
	79,  // 79: wechaty.Puppet.MessageSendFile:output_type -> wechaty.puppet.MessageSendFileResponse
	80,  // 80: wechaty.Puppet.MessagePayload:output_type -> wechaty.puppet.MessagePayloadResponse
	81,  // 81: wechaty.Puppet.MessageContact:output_type -> wechaty.puppet.MessageContactResponse
	82,  // 82: wechaty.Puppet.MessageFileStream:output_type -> wechaty.puppet.MessageFileStreamResponse
	83,  // 83: wechaty.Puppet.MessageImageStream:output_type -> wechaty.puppet.MessageImageStreamResponse
	84,  // 84: wechaty.Puppet.MessageMiniProgram:output_type -> wechaty.puppet.MessageMiniProgramResponse
	85,  // 85: wechaty.Puppet.MessageUrl:output_type -> wechaty.puppet.MessageUrlResponse
	86,  // 86: wechaty.Puppet.MessageSendContact:output_type -> wechaty.puppet.MessageSendContactResponse
	87,  // 87: wechaty.Puppet.MessageSendFileStream:output_type -> wechaty.puppet.MessageSendFileStreamResponse
	88,  // 88: wechaty.Puppet.MessageSendText:output_type -> wechaty.puppet.MessageSendTextResponse
	89,  // 89: wechaty.Puppet.MessageSendMiniProgram:output_type -> wechaty.puppet.MessageSendMiniProgramResponse
	90,  // 90: wechaty.Puppet.MessageSendUrl:output_type -> wechaty.puppet.MessageSendUrlResponse
	91,  // 91: wechaty.Puppet.MessageRecall:output_type -> wechaty.puppet.MessageRecallResponse
	92,  // 92: wechaty.Puppet.RoomPayload:output_type -> wechaty.puppet.RoomPayloadResponse
	93,  // 93: wechaty.Puppet.RoomList:output_type -> wechaty.puppet.RoomListResponse
	94,  // 94: wechaty.Puppet.RoomAdd:output_type -> wechaty.puppet.RoomAddResponse
	95,  // 95: wechaty.Puppet.RoomAvatar:output_type -> wechaty.puppet.RoomAvatarResponse
	96,  // 96: wechaty.Puppet.RoomCreate:output_type -> wechaty.puppet.RoomCreateResponse
	97,  // 97: wechaty.Puppet.RoomDel:output_type -> wechaty.puppet.RoomDelResponse
	98,  // 98: wechaty.Puppet.RoomQuit:output_type -> wechaty.puppet.RoomQuitResponse
	99,  // 99: wechaty.Puppet.RoomTopic:output_type -> wechaty.puppet.RoomTopicResponse
	100, // 100: wechaty.Puppet.RoomQRCode:output_type -> wechaty.puppet.RoomQRCodeResponse
	101, // 101: wechaty.Puppet.RoomAnnounce:output_type -> wechaty.puppet.RoomAnnounceResponse
	102, // 102: wechaty.Puppet.RoomMemberPayload:output_type -> wechaty.puppet.RoomMemberPayloadResponse
	103, // 103: wechaty.Puppet.RoomMemberList:output_type -> wechaty.puppet.RoomMemberListResponse
	104, // 104: wechaty.Puppet.RoomInvitationPayload:output_type -> wechaty.puppet.RoomInvitationPayloadResponse
	105, // 105: wechaty.Puppet.RoomInvitationAccept:output_type -> wechaty.puppet.RoomInvitationAcceptResponse
	106, // 106: wechaty.Puppet.TagContactAdd:output_type -> wechaty.puppet.TagContactAddResponse
	107, // 107: wechaty.Puppet.TagContactRemove:output_type -> wechaty.puppet.TagContactRemoveResponse
	108, // 108: wechaty.Puppet.TagContactDelete:output_type -> wechaty.puppet.TagContactDeleteResponse
	109, // 109: wechaty.Puppet.TagContactList:output_type -> wechaty.puppet.TagContactListResponse
	55,  // [55:110] is the sub-list for method output_type
	0,   // [0:55] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_puppet_proto_init() }
func file_puppet_proto_init() {
	if File_puppet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_puppet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_puppet_proto_goTypes,
		DependencyIndexes: file_puppet_proto_depIdxs,
	}.Build()
	File_puppet_proto = out.File
	file_puppet_proto_rawDesc = nil
	file_puppet_proto_goTypes = nil
	file_puppet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PuppetClient is the client API for Puppet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PuppetClient interface {
	//*
	//
	// Base
	//
	Start(ctx context.Context, in *puppet.StartRequest, opts ...grpc.CallOption) (*puppet.StartResponse, error)
	Stop(ctx context.Context, in *puppet.StopRequest, opts ...grpc.CallOption) (*puppet.StopResponse, error)
	Logout(ctx context.Context, in *puppet.LogoutRequest, opts ...grpc.CallOption) (*puppet.LogoutResponse, error)
	Ding(ctx context.Context, in *puppet.DingRequest, opts ...grpc.CallOption) (*puppet.DingResponse, error)
	Version(ctx context.Context, in *puppet.VersionRequest, opts ...grpc.CallOption) (*puppet.VersionResponse, error)
	//*
	//
	// Event - Server Stream
	//
	Event(ctx context.Context, in *puppet.EventRequest, opts ...grpc.CallOption) (Puppet_EventClient, error)
	DirtyPayload(ctx context.Context, in *puppet.DirtyPayloadRequest, opts ...grpc.CallOption) (*puppet.DirtyPayloadResponse, error)
	//*
	//
	// Contact Self
	//
	ContactSelfQRCode(ctx context.Context, in *puppet.ContactSelfQRCodeRequest, opts ...grpc.CallOption) (*puppet.ContactSelfQRCodeResponse, error)
	ContactSelfName(ctx context.Context, in *puppet.ContactSelfNameRequest, opts ...grpc.CallOption) (*puppet.ContactSelfNameResponse, error)
	ContactSelfSignature(ctx context.Context, in *puppet.ContactSelfSignatureRequest, opts ...grpc.CallOption) (*puppet.ContactSelfSignatureResponse, error)
	//*
	//
	// Contact
	//
	ContactPayload(ctx context.Context, in *puppet.ContactPayloadRequest, opts ...grpc.CallOption) (*puppet.ContactPayloadResponse, error)
	ContactAlias(ctx context.Context, in *puppet.ContactAliasRequest, opts ...grpc.CallOption) (*puppet.ContactAliasResponse, error)
	ContactAvatar(ctx context.Context, in *puppet.ContactAvatarRequest, opts ...grpc.CallOption) (*puppet.ContactAvatarResponse, error)
	ContactPhone(ctx context.Context, in *puppet.ContactPhoneRequest, opts ...grpc.CallOption) (*puppet.ContactPhoneResponse, error)
	ContactCorporationRemark(ctx context.Context, in *puppet.ContactCorporationRemarkRequest, opts ...grpc.CallOption) (*puppet.ContactCorporationRemarkResponse, error)
	ContactDescription(ctx context.Context, in *puppet.ContactDescriptionRequest, opts ...grpc.CallOption) (*puppet.ContactDescriptionResponse, error)
	ContactList(ctx context.Context, in *puppet.ContactListRequest, opts ...grpc.CallOption) (*puppet.ContactListResponse, error)
	//*
	//
	// Friendship
	//
	FriendshipPayload(ctx context.Context, in *puppet.FriendshipPayloadRequest, opts ...grpc.CallOption) (*puppet.FriendshipPayloadResponse, error)
	FriendshipSearchPhone(ctx context.Context, in *puppet.FriendshipSearchPhoneRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchPhoneResponse, error)
	FriendshipSearchWeixin(ctx context.Context, in *puppet.FriendshipSearchWeixinRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchWeixinResponse, error)
	FriendshipAdd(ctx context.Context, in *puppet.FriendshipAddRequest, opts ...grpc.CallOption) (*puppet.FriendshipAddResponse, error)
	FriendshipAccept(ctx context.Context, in *puppet.FriendshipAcceptRequest, opts ...grpc.CallOption) (*puppet.FriendshipAcceptResponse, error)
	//*
	// @deprecated: using MessageFileStream to transfer files
	// Huan(202010): will be removed (replaced by MessageFileStream) after Dec 31, 2021
	MessageFile(ctx context.Context, in *puppet.MessageFileRequest, opts ...grpc.CallOption) (*puppet.MessageFileResponse, error)
	//*
	// @deprecated: using MessageImageStream to transfer images
	// Huan(202010): will be removed (replaced by MessageImageStream) after Dec 31, 2021
	MessageImage(ctx context.Context, in *puppet.MessageImageRequest, opts ...grpc.CallOption) (*puppet.MessageImageResponse, error)
	//*
	// @deprecated: using MesageSendFileStream to transfer file message to server
	// Huan(202010): will be removed (replaced by MessageSendFileStream) after Dec 31, 2021
	MessageSendFile(ctx context.Context, in *puppet.MessageSendFileRequest, opts ...grpc.CallOption) (*puppet.MessageSendFileResponse, error)
	MessagePayload(ctx context.Context, in *puppet.MessagePayloadRequest, opts ...grpc.CallOption) (*puppet.MessagePayloadResponse, error)
	MessageContact(ctx context.Context, in *puppet.MessageContactRequest, opts ...grpc.CallOption) (*puppet.MessageContactResponse, error)
	MessageFileStream(ctx context.Context, in *puppet.MessageFileStreamRequest, opts ...grpc.CallOption) (Puppet_MessageFileStreamClient, error)
	MessageImageStream(ctx context.Context, in *puppet.MessageImageStreamRequest, opts ...grpc.CallOption) (Puppet_MessageImageStreamClient, error)
	MessageMiniProgram(ctx context.Context, in *puppet.MessageMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageMiniProgramResponse, error)
	MessageUrl(ctx context.Context, in *puppet.MessageUrlRequest, opts ...grpc.CallOption) (*puppet.MessageUrlResponse, error)
	MessageSendContact(ctx context.Context, in *puppet.MessageSendContactRequest, opts ...grpc.CallOption) (*puppet.MessageSendContactResponse, error)
	MessageSendFileStream(ctx context.Context, opts ...grpc.CallOption) (Puppet_MessageSendFileStreamClient, error)
	MessageSendText(ctx context.Context, in *puppet.MessageSendTextRequest, opts ...grpc.CallOption) (*puppet.MessageSendTextResponse, error)
	MessageSendMiniProgram(ctx context.Context, in *puppet.MessageSendMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageSendMiniProgramResponse, error)
	MessageSendUrl(ctx context.Context, in *puppet.MessageSendUrlRequest, opts ...grpc.CallOption) (*puppet.MessageSendUrlResponse, error)
	MessageRecall(ctx context.Context, in *puppet.MessageRecallRequest, opts ...grpc.CallOption) (*puppet.MessageRecallResponse, error)
	//*
	//
	// Room
	//
	RoomPayload(ctx context.Context, in *puppet.RoomPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomPayloadResponse, error)
	RoomList(ctx context.Context, in *puppet.RoomListRequest, opts ...grpc.CallOption) (*puppet.RoomListResponse, error)
	RoomAdd(ctx context.Context, in *puppet.RoomAddRequest, opts ...grpc.CallOption) (*puppet.RoomAddResponse, error)
	RoomAvatar(ctx context.Context, in *puppet.RoomAvatarRequest, opts ...grpc.CallOption) (*puppet.RoomAvatarResponse, error)
	RoomCreate(ctx context.Context, in *puppet.RoomCreateRequest, opts ...grpc.CallOption) (*puppet.RoomCreateResponse, error)
	RoomDel(ctx context.Context, in *puppet.RoomDelRequest, opts ...grpc.CallOption) (*puppet.RoomDelResponse, error)
	RoomQuit(ctx context.Context, in *puppet.RoomQuitRequest, opts ...grpc.CallOption) (*puppet.RoomQuitResponse, error)
	RoomTopic(ctx context.Context, in *puppet.RoomTopicRequest, opts ...grpc.CallOption) (*puppet.RoomTopicResponse, error)
	RoomQRCode(ctx context.Context, in *puppet.RoomQRCodeRequest, opts ...grpc.CallOption) (*puppet.RoomQRCodeResponse, error)
	RoomAnnounce(ctx context.Context, in *puppet.RoomAnnounceRequest, opts ...grpc.CallOption) (*puppet.RoomAnnounceResponse, error)
	//*
	//
	// Room Member
	//
	RoomMemberPayload(ctx context.Context, in *puppet.RoomMemberPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomMemberPayloadResponse, error)
	RoomMemberList(ctx context.Context, in *puppet.RoomMemberListRequest, opts ...grpc.CallOption) (*puppet.RoomMemberListResponse, error)
	//*
	//
	// Room Invitation
	//
	RoomInvitationPayload(ctx context.Context, in *puppet.RoomInvitationPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationPayloadResponse, error)
	RoomInvitationAccept(ctx context.Context, in *puppet.RoomInvitationAcceptRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationAcceptResponse, error)
	//*
	//
	// Tag
	//
	TagContactAdd(ctx context.Context, in *puppet.TagContactAddRequest, opts ...grpc.CallOption) (*puppet.TagContactAddResponse, error)
	TagContactRemove(ctx context.Context, in *puppet.TagContactRemoveRequest, opts ...grpc.CallOption) (*puppet.TagContactRemoveResponse, error)
	TagContactDelete(ctx context.Context, in *puppet.TagContactDeleteRequest, opts ...grpc.CallOption) (*puppet.TagContactDeleteResponse, error)
	TagContactList(ctx context.Context, in *puppet.TagContactListRequest, opts ...grpc.CallOption) (*puppet.TagContactListResponse, error)
}

type puppetClient struct {
	cc grpc.ClientConnInterface
}

func NewPuppetClient(cc grpc.ClientConnInterface) PuppetClient {
	return &puppetClient{cc}
}

func (c *puppetClient) Start(ctx context.Context, in *puppet.StartRequest, opts ...grpc.CallOption) (*puppet.StartResponse, error) {
	out := new(puppet.StartResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Stop(ctx context.Context, in *puppet.StopRequest, opts ...grpc.CallOption) (*puppet.StopResponse, error) {
	out := new(puppet.StopResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Logout(ctx context.Context, in *puppet.LogoutRequest, opts ...grpc.CallOption) (*puppet.LogoutResponse, error) {
	out := new(puppet.LogoutResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Ding(ctx context.Context, in *puppet.DingRequest, opts ...grpc.CallOption) (*puppet.DingResponse, error) {
	out := new(puppet.DingResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Ding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Version(ctx context.Context, in *puppet.VersionRequest, opts ...grpc.CallOption) (*puppet.VersionResponse, error) {
	out := new(puppet.VersionResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Event(ctx context.Context, in *puppet.EventRequest, opts ...grpc.CallOption) (Puppet_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Puppet_serviceDesc.Streams[0], "/wechaty.Puppet/Event", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_EventClient interface {
	Recv() (*puppet.EventResponse, error)
	grpc.ClientStream
}

type puppetEventClient struct {
	grpc.ClientStream
}

func (x *puppetEventClient) Recv() (*puppet.EventResponse, error) {
	m := new(puppet.EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) DirtyPayload(ctx context.Context, in *puppet.DirtyPayloadRequest, opts ...grpc.CallOption) (*puppet.DirtyPayloadResponse, error) {
	out := new(puppet.DirtyPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/DirtyPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfQRCode(ctx context.Context, in *puppet.ContactSelfQRCodeRequest, opts ...grpc.CallOption) (*puppet.ContactSelfQRCodeResponse, error) {
	out := new(puppet.ContactSelfQRCodeResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfName(ctx context.Context, in *puppet.ContactSelfNameRequest, opts ...grpc.CallOption) (*puppet.ContactSelfNameResponse, error) {
	out := new(puppet.ContactSelfNameResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfSignature(ctx context.Context, in *puppet.ContactSelfSignatureRequest, opts ...grpc.CallOption) (*puppet.ContactSelfSignatureResponse, error) {
	out := new(puppet.ContactSelfSignatureResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactPayload(ctx context.Context, in *puppet.ContactPayloadRequest, opts ...grpc.CallOption) (*puppet.ContactPayloadResponse, error) {
	out := new(puppet.ContactPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactAlias(ctx context.Context, in *puppet.ContactAliasRequest, opts ...grpc.CallOption) (*puppet.ContactAliasResponse, error) {
	out := new(puppet.ContactAliasResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactAvatar(ctx context.Context, in *puppet.ContactAvatarRequest, opts ...grpc.CallOption) (*puppet.ContactAvatarResponse, error) {
	out := new(puppet.ContactAvatarResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactPhone(ctx context.Context, in *puppet.ContactPhoneRequest, opts ...grpc.CallOption) (*puppet.ContactPhoneResponse, error) {
	out := new(puppet.ContactPhoneResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactCorporationRemark(ctx context.Context, in *puppet.ContactCorporationRemarkRequest, opts ...grpc.CallOption) (*puppet.ContactCorporationRemarkResponse, error) {
	out := new(puppet.ContactCorporationRemarkResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactCorporationRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactDescription(ctx context.Context, in *puppet.ContactDescriptionRequest, opts ...grpc.CallOption) (*puppet.ContactDescriptionResponse, error) {
	out := new(puppet.ContactDescriptionResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactList(ctx context.Context, in *puppet.ContactListRequest, opts ...grpc.CallOption) (*puppet.ContactListResponse, error) {
	out := new(puppet.ContactListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipPayload(ctx context.Context, in *puppet.FriendshipPayloadRequest, opts ...grpc.CallOption) (*puppet.FriendshipPayloadResponse, error) {
	out := new(puppet.FriendshipPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipSearchPhone(ctx context.Context, in *puppet.FriendshipSearchPhoneRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchPhoneResponse, error) {
	out := new(puppet.FriendshipSearchPhoneResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipSearchPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipSearchWeixin(ctx context.Context, in *puppet.FriendshipSearchWeixinRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchWeixinResponse, error) {
	out := new(puppet.FriendshipSearchWeixinResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipSearchWeixin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipAdd(ctx context.Context, in *puppet.FriendshipAddRequest, opts ...grpc.CallOption) (*puppet.FriendshipAddResponse, error) {
	out := new(puppet.FriendshipAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipAccept(ctx context.Context, in *puppet.FriendshipAcceptRequest, opts ...grpc.CallOption) (*puppet.FriendshipAcceptResponse, error) {
	out := new(puppet.FriendshipAcceptResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageFile(ctx context.Context, in *puppet.MessageFileRequest, opts ...grpc.CallOption) (*puppet.MessageFileResponse, error) {
	out := new(puppet.MessageFileResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageImage(ctx context.Context, in *puppet.MessageImageRequest, opts ...grpc.CallOption) (*puppet.MessageImageResponse, error) {
	out := new(puppet.MessageImageResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendFile(ctx context.Context, in *puppet.MessageSendFileRequest, opts ...grpc.CallOption) (*puppet.MessageSendFileResponse, error) {
	out := new(puppet.MessageSendFileResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessagePayload(ctx context.Context, in *puppet.MessagePayloadRequest, opts ...grpc.CallOption) (*puppet.MessagePayloadResponse, error) {
	out := new(puppet.MessagePayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessagePayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageContact(ctx context.Context, in *puppet.MessageContactRequest, opts ...grpc.CallOption) (*puppet.MessageContactResponse, error) {
	out := new(puppet.MessageContactResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageFileStream(ctx context.Context, in *puppet.MessageFileStreamRequest, opts ...grpc.CallOption) (Puppet_MessageFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Puppet_serviceDesc.Streams[1], "/wechaty.Puppet/MessageFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetMessageFileStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_MessageFileStreamClient interface {
	Recv() (*puppet.MessageFileStreamResponse, error)
	grpc.ClientStream
}

type puppetMessageFileStreamClient struct {
	grpc.ClientStream
}

func (x *puppetMessageFileStreamClient) Recv() (*puppet.MessageFileStreamResponse, error) {
	m := new(puppet.MessageFileStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) MessageImageStream(ctx context.Context, in *puppet.MessageImageStreamRequest, opts ...grpc.CallOption) (Puppet_MessageImageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Puppet_serviceDesc.Streams[2], "/wechaty.Puppet/MessageImageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetMessageImageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_MessageImageStreamClient interface {
	Recv() (*puppet.MessageImageStreamResponse, error)
	grpc.ClientStream
}

type puppetMessageImageStreamClient struct {
	grpc.ClientStream
}

func (x *puppetMessageImageStreamClient) Recv() (*puppet.MessageImageStreamResponse, error) {
	m := new(puppet.MessageImageStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) MessageMiniProgram(ctx context.Context, in *puppet.MessageMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageMiniProgramResponse, error) {
	out := new(puppet.MessageMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageUrl(ctx context.Context, in *puppet.MessageUrlRequest, opts ...grpc.CallOption) (*puppet.MessageUrlResponse, error) {
	out := new(puppet.MessageUrlResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendContact(ctx context.Context, in *puppet.MessageSendContactRequest, opts ...grpc.CallOption) (*puppet.MessageSendContactResponse, error) {
	out := new(puppet.MessageSendContactResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendFileStream(ctx context.Context, opts ...grpc.CallOption) (Puppet_MessageSendFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Puppet_serviceDesc.Streams[3], "/wechaty.Puppet/MessageSendFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetMessageSendFileStreamClient{stream}
	return x, nil
}

type Puppet_MessageSendFileStreamClient interface {
	Send(*puppet.MessageSendFileStreamRequest) error
	CloseAndRecv() (*puppet.MessageSendFileStreamResponse, error)
	grpc.ClientStream
}

type puppetMessageSendFileStreamClient struct {
	grpc.ClientStream
}

func (x *puppetMessageSendFileStreamClient) Send(m *puppet.MessageSendFileStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *puppetMessageSendFileStreamClient) CloseAndRecv() (*puppet.MessageSendFileStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(puppet.MessageSendFileStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) MessageSendText(ctx context.Context, in *puppet.MessageSendTextRequest, opts ...grpc.CallOption) (*puppet.MessageSendTextResponse, error) {
	out := new(puppet.MessageSendTextResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendMiniProgram(ctx context.Context, in *puppet.MessageSendMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageSendMiniProgramResponse, error) {
	out := new(puppet.MessageSendMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendUrl(ctx context.Context, in *puppet.MessageSendUrlRequest, opts ...grpc.CallOption) (*puppet.MessageSendUrlResponse, error) {
	out := new(puppet.MessageSendUrlResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageRecall(ctx context.Context, in *puppet.MessageRecallRequest, opts ...grpc.CallOption) (*puppet.MessageRecallResponse, error) {
	out := new(puppet.MessageRecallResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomPayload(ctx context.Context, in *puppet.RoomPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomPayloadResponse, error) {
	out := new(puppet.RoomPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomList(ctx context.Context, in *puppet.RoomListRequest, opts ...grpc.CallOption) (*puppet.RoomListResponse, error) {
	out := new(puppet.RoomListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAdd(ctx context.Context, in *puppet.RoomAddRequest, opts ...grpc.CallOption) (*puppet.RoomAddResponse, error) {
	out := new(puppet.RoomAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAvatar(ctx context.Context, in *puppet.RoomAvatarRequest, opts ...grpc.CallOption) (*puppet.RoomAvatarResponse, error) {
	out := new(puppet.RoomAvatarResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomCreate(ctx context.Context, in *puppet.RoomCreateRequest, opts ...grpc.CallOption) (*puppet.RoomCreateResponse, error) {
	out := new(puppet.RoomCreateResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomDel(ctx context.Context, in *puppet.RoomDelRequest, opts ...grpc.CallOption) (*puppet.RoomDelResponse, error) {
	out := new(puppet.RoomDelResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomQuit(ctx context.Context, in *puppet.RoomQuitRequest, opts ...grpc.CallOption) (*puppet.RoomQuitResponse, error) {
	out := new(puppet.RoomQuitResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomQuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomTopic(ctx context.Context, in *puppet.RoomTopicRequest, opts ...grpc.CallOption) (*puppet.RoomTopicResponse, error) {
	out := new(puppet.RoomTopicResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomQRCode(ctx context.Context, in *puppet.RoomQRCodeRequest, opts ...grpc.CallOption) (*puppet.RoomQRCodeResponse, error) {
	out := new(puppet.RoomQRCodeResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAnnounce(ctx context.Context, in *puppet.RoomAnnounceRequest, opts ...grpc.CallOption) (*puppet.RoomAnnounceResponse, error) {
	out := new(puppet.RoomAnnounceResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAnnounce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomMemberPayload(ctx context.Context, in *puppet.RoomMemberPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomMemberPayloadResponse, error) {
	out := new(puppet.RoomMemberPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomMemberPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomMemberList(ctx context.Context, in *puppet.RoomMemberListRequest, opts ...grpc.CallOption) (*puppet.RoomMemberListResponse, error) {
	out := new(puppet.RoomMemberListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomInvitationPayload(ctx context.Context, in *puppet.RoomInvitationPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationPayloadResponse, error) {
	out := new(puppet.RoomInvitationPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomInvitationPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomInvitationAccept(ctx context.Context, in *puppet.RoomInvitationAcceptRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationAcceptResponse, error) {
	out := new(puppet.RoomInvitationAcceptResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomInvitationAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactAdd(ctx context.Context, in *puppet.TagContactAddRequest, opts ...grpc.CallOption) (*puppet.TagContactAddResponse, error) {
	out := new(puppet.TagContactAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactRemove(ctx context.Context, in *puppet.TagContactRemoveRequest, opts ...grpc.CallOption) (*puppet.TagContactRemoveResponse, error) {
	out := new(puppet.TagContactRemoveResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactDelete(ctx context.Context, in *puppet.TagContactDeleteRequest, opts ...grpc.CallOption) (*puppet.TagContactDeleteResponse, error) {
	out := new(puppet.TagContactDeleteResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactList(ctx context.Context, in *puppet.TagContactListRequest, opts ...grpc.CallOption) (*puppet.TagContactListResponse, error) {
	out := new(puppet.TagContactListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PuppetServer is the server API for Puppet service.
type PuppetServer interface {
	//*
	//
	// Base
	//
	Start(context.Context, *puppet.StartRequest) (*puppet.StartResponse, error)
	Stop(context.Context, *puppet.StopRequest) (*puppet.StopResponse, error)
	Logout(context.Context, *puppet.LogoutRequest) (*puppet.LogoutResponse, error)
	Ding(context.Context, *puppet.DingRequest) (*puppet.DingResponse, error)
	Version(context.Context, *puppet.VersionRequest) (*puppet.VersionResponse, error)
	//*
	//
	// Event - Server Stream
	//
	Event(*puppet.EventRequest, Puppet_EventServer) error
	DirtyPayload(context.Context, *puppet.DirtyPayloadRequest) (*puppet.DirtyPayloadResponse, error)
	//*
	//
	// Contact Self
	//
	ContactSelfQRCode(context.Context, *puppet.ContactSelfQRCodeRequest) (*puppet.ContactSelfQRCodeResponse, error)
	ContactSelfName(context.Context, *puppet.ContactSelfNameRequest) (*puppet.ContactSelfNameResponse, error)
	ContactSelfSignature(context.Context, *puppet.ContactSelfSignatureRequest) (*puppet.ContactSelfSignatureResponse, error)
	//*
	//
	// Contact
	//
	ContactPayload(context.Context, *puppet.ContactPayloadRequest) (*puppet.ContactPayloadResponse, error)
	ContactAlias(context.Context, *puppet.ContactAliasRequest) (*puppet.ContactAliasResponse, error)
	ContactAvatar(context.Context, *puppet.ContactAvatarRequest) (*puppet.ContactAvatarResponse, error)
	ContactPhone(context.Context, *puppet.ContactPhoneRequest) (*puppet.ContactPhoneResponse, error)
	ContactCorporationRemark(context.Context, *puppet.ContactCorporationRemarkRequest) (*puppet.ContactCorporationRemarkResponse, error)
	ContactDescription(context.Context, *puppet.ContactDescriptionRequest) (*puppet.ContactDescriptionResponse, error)
	ContactList(context.Context, *puppet.ContactListRequest) (*puppet.ContactListResponse, error)
	//*
	//
	// Friendship
	//
	FriendshipPayload(context.Context, *puppet.FriendshipPayloadRequest) (*puppet.FriendshipPayloadResponse, error)
	FriendshipSearchPhone(context.Context, *puppet.FriendshipSearchPhoneRequest) (*puppet.FriendshipSearchPhoneResponse, error)
	FriendshipSearchWeixin(context.Context, *puppet.FriendshipSearchWeixinRequest) (*puppet.FriendshipSearchWeixinResponse, error)
	FriendshipAdd(context.Context, *puppet.FriendshipAddRequest) (*puppet.FriendshipAddResponse, error)
	FriendshipAccept(context.Context, *puppet.FriendshipAcceptRequest) (*puppet.FriendshipAcceptResponse, error)
	//*
	// @deprecated: using MessageFileStream to transfer files
	// Huan(202010): will be removed (replaced by MessageFileStream) after Dec 31, 2021
	MessageFile(context.Context, *puppet.MessageFileRequest) (*puppet.MessageFileResponse, error)
	//*
	// @deprecated: using MessageImageStream to transfer images
	// Huan(202010): will be removed (replaced by MessageImageStream) after Dec 31, 2021
	MessageImage(context.Context, *puppet.MessageImageRequest) (*puppet.MessageImageResponse, error)
	//*
	// @deprecated: using MesageSendFileStream to transfer file message to server
	// Huan(202010): will be removed (replaced by MessageSendFileStream) after Dec 31, 2021
	MessageSendFile(context.Context, *puppet.MessageSendFileRequest) (*puppet.MessageSendFileResponse, error)
	MessagePayload(context.Context, *puppet.MessagePayloadRequest) (*puppet.MessagePayloadResponse, error)
	MessageContact(context.Context, *puppet.MessageContactRequest) (*puppet.MessageContactResponse, error)
	MessageFileStream(*puppet.MessageFileStreamRequest, Puppet_MessageFileStreamServer) error
	MessageImageStream(*puppet.MessageImageStreamRequest, Puppet_MessageImageStreamServer) error
	MessageMiniProgram(context.Context, *puppet.MessageMiniProgramRequest) (*puppet.MessageMiniProgramResponse, error)
	MessageUrl(context.Context, *puppet.MessageUrlRequest) (*puppet.MessageUrlResponse, error)
	MessageSendContact(context.Context, *puppet.MessageSendContactRequest) (*puppet.MessageSendContactResponse, error)
	MessageSendFileStream(Puppet_MessageSendFileStreamServer) error
	MessageSendText(context.Context, *puppet.MessageSendTextRequest) (*puppet.MessageSendTextResponse, error)
	MessageSendMiniProgram(context.Context, *puppet.MessageSendMiniProgramRequest) (*puppet.MessageSendMiniProgramResponse, error)
	MessageSendUrl(context.Context, *puppet.MessageSendUrlRequest) (*puppet.MessageSendUrlResponse, error)
	MessageRecall(context.Context, *puppet.MessageRecallRequest) (*puppet.MessageRecallResponse, error)
	//*
	//
	// Room
	//
	RoomPayload(context.Context, *puppet.RoomPayloadRequest) (*puppet.RoomPayloadResponse, error)
	RoomList(context.Context, *puppet.RoomListRequest) (*puppet.RoomListResponse, error)
	RoomAdd(context.Context, *puppet.RoomAddRequest) (*puppet.RoomAddResponse, error)
	RoomAvatar(context.Context, *puppet.RoomAvatarRequest) (*puppet.RoomAvatarResponse, error)
	RoomCreate(context.Context, *puppet.RoomCreateRequest) (*puppet.RoomCreateResponse, error)
	RoomDel(context.Context, *puppet.RoomDelRequest) (*puppet.RoomDelResponse, error)
	RoomQuit(context.Context, *puppet.RoomQuitRequest) (*puppet.RoomQuitResponse, error)
	RoomTopic(context.Context, *puppet.RoomTopicRequest) (*puppet.RoomTopicResponse, error)
	RoomQRCode(context.Context, *puppet.RoomQRCodeRequest) (*puppet.RoomQRCodeResponse, error)
	RoomAnnounce(context.Context, *puppet.RoomAnnounceRequest) (*puppet.RoomAnnounceResponse, error)
	//*
	//
	// Room Member
	//
	RoomMemberPayload(context.Context, *puppet.RoomMemberPayloadRequest) (*puppet.RoomMemberPayloadResponse, error)
	RoomMemberList(context.Context, *puppet.RoomMemberListRequest) (*puppet.RoomMemberListResponse, error)
	//*
	//
	// Room Invitation
	//
	RoomInvitationPayload(context.Context, *puppet.RoomInvitationPayloadRequest) (*puppet.RoomInvitationPayloadResponse, error)
	RoomInvitationAccept(context.Context, *puppet.RoomInvitationAcceptRequest) (*puppet.RoomInvitationAcceptResponse, error)
	//*
	//
	// Tag
	//
	TagContactAdd(context.Context, *puppet.TagContactAddRequest) (*puppet.TagContactAddResponse, error)
	TagContactRemove(context.Context, *puppet.TagContactRemoveRequest) (*puppet.TagContactRemoveResponse, error)
	TagContactDelete(context.Context, *puppet.TagContactDeleteRequest) (*puppet.TagContactDeleteResponse, error)
	TagContactList(context.Context, *puppet.TagContactListRequest) (*puppet.TagContactListResponse, error)
}

// UnimplementedPuppetServer can be embedded to have forward compatible implementations.
type UnimplementedPuppetServer struct {
}

func (*UnimplementedPuppetServer) Start(context.Context, *puppet.StartRequest) (*puppet.StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedPuppetServer) Stop(context.Context, *puppet.StopRequest) (*puppet.StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedPuppetServer) Logout(context.Context, *puppet.LogoutRequest) (*puppet.LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedPuppetServer) Ding(context.Context, *puppet.DingRequest) (*puppet.DingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ding not implemented")
}
func (*UnimplementedPuppetServer) Version(context.Context, *puppet.VersionRequest) (*puppet.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedPuppetServer) Event(*puppet.EventRequest, Puppet_EventServer) error {
	return status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (*UnimplementedPuppetServer) DirtyPayload(context.Context, *puppet.DirtyPayloadRequest) (*puppet.DirtyPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirtyPayload not implemented")
}
func (*UnimplementedPuppetServer) ContactSelfQRCode(context.Context, *puppet.ContactSelfQRCodeRequest) (*puppet.ContactSelfQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfQRCode not implemented")
}
func (*UnimplementedPuppetServer) ContactSelfName(context.Context, *puppet.ContactSelfNameRequest) (*puppet.ContactSelfNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfName not implemented")
}
func (*UnimplementedPuppetServer) ContactSelfSignature(context.Context, *puppet.ContactSelfSignatureRequest) (*puppet.ContactSelfSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfSignature not implemented")
}
func (*UnimplementedPuppetServer) ContactPayload(context.Context, *puppet.ContactPayloadRequest) (*puppet.ContactPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactPayload not implemented")
}
func (*UnimplementedPuppetServer) ContactAlias(context.Context, *puppet.ContactAliasRequest) (*puppet.ContactAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAlias not implemented")
}
func (*UnimplementedPuppetServer) ContactAvatar(context.Context, *puppet.ContactAvatarRequest) (*puppet.ContactAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAvatar not implemented")
}
func (*UnimplementedPuppetServer) ContactPhone(context.Context, *puppet.ContactPhoneRequest) (*puppet.ContactPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactPhone not implemented")
}
func (*UnimplementedPuppetServer) ContactCorporationRemark(context.Context, *puppet.ContactCorporationRemarkRequest) (*puppet.ContactCorporationRemarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactCorporationRemark not implemented")
}
func (*UnimplementedPuppetServer) ContactDescription(context.Context, *puppet.ContactDescriptionRequest) (*puppet.ContactDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactDescription not implemented")
}
func (*UnimplementedPuppetServer) ContactList(context.Context, *puppet.ContactListRequest) (*puppet.ContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactList not implemented")
}
func (*UnimplementedPuppetServer) FriendshipPayload(context.Context, *puppet.FriendshipPayloadRequest) (*puppet.FriendshipPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipPayload not implemented")
}
func (*UnimplementedPuppetServer) FriendshipSearchPhone(context.Context, *puppet.FriendshipSearchPhoneRequest) (*puppet.FriendshipSearchPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipSearchPhone not implemented")
}
func (*UnimplementedPuppetServer) FriendshipSearchWeixin(context.Context, *puppet.FriendshipSearchWeixinRequest) (*puppet.FriendshipSearchWeixinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipSearchWeixin not implemented")
}
func (*UnimplementedPuppetServer) FriendshipAdd(context.Context, *puppet.FriendshipAddRequest) (*puppet.FriendshipAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipAdd not implemented")
}
func (*UnimplementedPuppetServer) FriendshipAccept(context.Context, *puppet.FriendshipAcceptRequest) (*puppet.FriendshipAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipAccept not implemented")
}
func (*UnimplementedPuppetServer) MessageFile(context.Context, *puppet.MessageFileRequest) (*puppet.MessageFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageFile not implemented")
}
func (*UnimplementedPuppetServer) MessageImage(context.Context, *puppet.MessageImageRequest) (*puppet.MessageImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageImage not implemented")
}
func (*UnimplementedPuppetServer) MessageSendFile(context.Context, *puppet.MessageSendFileRequest) (*puppet.MessageSendFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendFile not implemented")
}
func (*UnimplementedPuppetServer) MessagePayload(context.Context, *puppet.MessagePayloadRequest) (*puppet.MessagePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagePayload not implemented")
}
func (*UnimplementedPuppetServer) MessageContact(context.Context, *puppet.MessageContactRequest) (*puppet.MessageContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageContact not implemented")
}
func (*UnimplementedPuppetServer) MessageFileStream(*puppet.MessageFileStreamRequest, Puppet_MessageFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageFileStream not implemented")
}
func (*UnimplementedPuppetServer) MessageImageStream(*puppet.MessageImageStreamRequest, Puppet_MessageImageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageImageStream not implemented")
}
func (*UnimplementedPuppetServer) MessageMiniProgram(context.Context, *puppet.MessageMiniProgramRequest) (*puppet.MessageMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageMiniProgram not implemented")
}
func (*UnimplementedPuppetServer) MessageUrl(context.Context, *puppet.MessageUrlRequest) (*puppet.MessageUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageUrl not implemented")
}
func (*UnimplementedPuppetServer) MessageSendContact(context.Context, *puppet.MessageSendContactRequest) (*puppet.MessageSendContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendContact not implemented")
}
func (*UnimplementedPuppetServer) MessageSendFileStream(Puppet_MessageSendFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageSendFileStream not implemented")
}
func (*UnimplementedPuppetServer) MessageSendText(context.Context, *puppet.MessageSendTextRequest) (*puppet.MessageSendTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendText not implemented")
}
func (*UnimplementedPuppetServer) MessageSendMiniProgram(context.Context, *puppet.MessageSendMiniProgramRequest) (*puppet.MessageSendMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendMiniProgram not implemented")
}
func (*UnimplementedPuppetServer) MessageSendUrl(context.Context, *puppet.MessageSendUrlRequest) (*puppet.MessageSendUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendUrl not implemented")
}
func (*UnimplementedPuppetServer) MessageRecall(context.Context, *puppet.MessageRecallRequest) (*puppet.MessageRecallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageRecall not implemented")
}
func (*UnimplementedPuppetServer) RoomPayload(context.Context, *puppet.RoomPayloadRequest) (*puppet.RoomPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomPayload not implemented")
}
func (*UnimplementedPuppetServer) RoomList(context.Context, *puppet.RoomListRequest) (*puppet.RoomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomList not implemented")
}
func (*UnimplementedPuppetServer) RoomAdd(context.Context, *puppet.RoomAddRequest) (*puppet.RoomAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAdd not implemented")
}
func (*UnimplementedPuppetServer) RoomAvatar(context.Context, *puppet.RoomAvatarRequest) (*puppet.RoomAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAvatar not implemented")
}
func (*UnimplementedPuppetServer) RoomCreate(context.Context, *puppet.RoomCreateRequest) (*puppet.RoomCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreate not implemented")
}
func (*UnimplementedPuppetServer) RoomDel(context.Context, *puppet.RoomDelRequest) (*puppet.RoomDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomDel not implemented")
}
func (*UnimplementedPuppetServer) RoomQuit(context.Context, *puppet.RoomQuitRequest) (*puppet.RoomQuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomQuit not implemented")
}
func (*UnimplementedPuppetServer) RoomTopic(context.Context, *puppet.RoomTopicRequest) (*puppet.RoomTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomTopic not implemented")
}
func (*UnimplementedPuppetServer) RoomQRCode(context.Context, *puppet.RoomQRCodeRequest) (*puppet.RoomQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomQRCode not implemented")
}
func (*UnimplementedPuppetServer) RoomAnnounce(context.Context, *puppet.RoomAnnounceRequest) (*puppet.RoomAnnounceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAnnounce not implemented")
}
func (*UnimplementedPuppetServer) RoomMemberPayload(context.Context, *puppet.RoomMemberPayloadRequest) (*puppet.RoomMemberPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMemberPayload not implemented")
}
func (*UnimplementedPuppetServer) RoomMemberList(context.Context, *puppet.RoomMemberListRequest) (*puppet.RoomMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMemberList not implemented")
}
func (*UnimplementedPuppetServer) RoomInvitationPayload(context.Context, *puppet.RoomInvitationPayloadRequest) (*puppet.RoomInvitationPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomInvitationPayload not implemented")
}
func (*UnimplementedPuppetServer) RoomInvitationAccept(context.Context, *puppet.RoomInvitationAcceptRequest) (*puppet.RoomInvitationAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomInvitationAccept not implemented")
}
func (*UnimplementedPuppetServer) TagContactAdd(context.Context, *puppet.TagContactAddRequest) (*puppet.TagContactAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactAdd not implemented")
}
func (*UnimplementedPuppetServer) TagContactRemove(context.Context, *puppet.TagContactRemoveRequest) (*puppet.TagContactRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactRemove not implemented")
}
func (*UnimplementedPuppetServer) TagContactDelete(context.Context, *puppet.TagContactDeleteRequest) (*puppet.TagContactDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactDelete not implemented")
}
func (*UnimplementedPuppetServer) TagContactList(context.Context, *puppet.TagContactListRequest) (*puppet.TagContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactList not implemented")
}

func RegisterPuppetServer(s *grpc.Server, srv PuppetServer) {
	s.RegisterService(&_Puppet_serviceDesc, srv)
}

func _Puppet_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Start(ctx, req.(*puppet.StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Stop(ctx, req.(*puppet.StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Logout(ctx, req.(*puppet.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Ding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.DingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Ding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Ding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Ding(ctx, req.(*puppet.DingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Version(ctx, req.(*puppet.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).Event(m, &puppetEventServer{stream})
}

type Puppet_EventServer interface {
	Send(*puppet.EventResponse) error
	grpc.ServerStream
}

type puppetEventServer struct {
	grpc.ServerStream
}

func (x *puppetEventServer) Send(m *puppet.EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_DirtyPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.DirtyPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).DirtyPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/DirtyPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).DirtyPayload(ctx, req.(*puppet.DirtyPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfQRCode(ctx, req.(*puppet.ContactSelfQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfName(ctx, req.(*puppet.ContactSelfNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfSignature(ctx, req.(*puppet.ContactSelfSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactPayload(ctx, req.(*puppet.ContactPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactAlias(ctx, req.(*puppet.ContactAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactAvatar(ctx, req.(*puppet.ContactAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactPhone(ctx, req.(*puppet.ContactPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactCorporationRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactCorporationRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactCorporationRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactCorporationRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactCorporationRemark(ctx, req.(*puppet.ContactCorporationRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactDescription(ctx, req.(*puppet.ContactDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactList(ctx, req.(*puppet.ContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipPayload(ctx, req.(*puppet.FriendshipPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipSearchPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipSearchPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipSearchPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipSearchPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipSearchPhone(ctx, req.(*puppet.FriendshipSearchPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipSearchWeixin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipSearchWeixinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipSearchWeixin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipSearchWeixin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipSearchWeixin(ctx, req.(*puppet.FriendshipSearchWeixinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipAdd(ctx, req.(*puppet.FriendshipAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipAccept(ctx, req.(*puppet.FriendshipAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageFile(ctx, req.(*puppet.MessageFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageImage(ctx, req.(*puppet.MessageImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendFile(ctx, req.(*puppet.MessageSendFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessagePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessagePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessagePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessagePayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessagePayload(ctx, req.(*puppet.MessagePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageContact(ctx, req.(*puppet.MessageContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.MessageFileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).MessageFileStream(m, &puppetMessageFileStreamServer{stream})
}

type Puppet_MessageFileStreamServer interface {
	Send(*puppet.MessageFileStreamResponse) error
	grpc.ServerStream
}

type puppetMessageFileStreamServer struct {
	grpc.ServerStream
}

func (x *puppetMessageFileStreamServer) Send(m *puppet.MessageFileStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_MessageImageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.MessageImageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).MessageImageStream(m, &puppetMessageImageStreamServer{stream})
}

type Puppet_MessageImageStreamServer interface {
	Send(*puppet.MessageImageStreamResponse) error
	grpc.ServerStream
}

type puppetMessageImageStreamServer struct {
	grpc.ServerStream
}

func (x *puppetMessageImageStreamServer) Send(m *puppet.MessageImageStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_MessageMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageMiniProgram(ctx, req.(*puppet.MessageMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageUrl(ctx, req.(*puppet.MessageUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendContact(ctx, req.(*puppet.MessageSendContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PuppetServer).MessageSendFileStream(&puppetMessageSendFileStreamServer{stream})
}

type Puppet_MessageSendFileStreamServer interface {
	SendAndClose(*puppet.MessageSendFileStreamResponse) error
	Recv() (*puppet.MessageSendFileStreamRequest, error)
	grpc.ServerStream
}

type puppetMessageSendFileStreamServer struct {
	grpc.ServerStream
}

func (x *puppetMessageSendFileStreamServer) SendAndClose(m *puppet.MessageSendFileStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *puppetMessageSendFileStreamServer) Recv() (*puppet.MessageSendFileStreamRequest, error) {
	m := new(puppet.MessageSendFileStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Puppet_MessageSendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendText(ctx, req.(*puppet.MessageSendTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendMiniProgram(ctx, req.(*puppet.MessageSendMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendUrl(ctx, req.(*puppet.MessageSendUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageRecall(ctx, req.(*puppet.MessageRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomPayload(ctx, req.(*puppet.RoomPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomList(ctx, req.(*puppet.RoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAdd(ctx, req.(*puppet.RoomAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAvatar(ctx, req.(*puppet.RoomAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomCreate(ctx, req.(*puppet.RoomCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomDel(ctx, req.(*puppet.RoomDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomQuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomQuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomQuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomQuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomQuit(ctx, req.(*puppet.RoomQuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomTopic(ctx, req.(*puppet.RoomTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomQRCode(ctx, req.(*puppet.RoomQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAnnounce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAnnounce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAnnounce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAnnounce(ctx, req.(*puppet.RoomAnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomMemberPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomMemberPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomMemberPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomMemberPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomMemberPayload(ctx, req.(*puppet.RoomMemberPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomMemberList(ctx, req.(*puppet.RoomMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomInvitationPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomInvitationPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomInvitationPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomInvitationPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomInvitationPayload(ctx, req.(*puppet.RoomInvitationPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomInvitationAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomInvitationAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomInvitationAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomInvitationAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomInvitationAccept(ctx, req.(*puppet.RoomInvitationAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactAdd(ctx, req.(*puppet.TagContactAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactRemove(ctx, req.(*puppet.TagContactRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactDelete(ctx, req.(*puppet.TagContactDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactList(ctx, req.(*puppet.TagContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Puppet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wechaty.Puppet",
	HandlerType: (*PuppetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Puppet_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Puppet_Stop_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Puppet_Logout_Handler,
		},
		{
			MethodName: "Ding",
			Handler:    _Puppet_Ding_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Puppet_Version_Handler,
		},
		{
			MethodName: "DirtyPayload",
			Handler:    _Puppet_DirtyPayload_Handler,
		},
		{
			MethodName: "ContactSelfQRCode",
			Handler:    _Puppet_ContactSelfQRCode_Handler,
		},
		{
			MethodName: "ContactSelfName",
			Handler:    _Puppet_ContactSelfName_Handler,
		},
		{
			MethodName: "ContactSelfSignature",
			Handler:    _Puppet_ContactSelfSignature_Handler,
		},
		{
			MethodName: "ContactPayload",
			Handler:    _Puppet_ContactPayload_Handler,
		},
		{
			MethodName: "ContactAlias",
			Handler:    _Puppet_ContactAlias_Handler,
		},
		{
			MethodName: "ContactAvatar",
			Handler:    _Puppet_ContactAvatar_Handler,
		},
		{
			MethodName: "ContactPhone",
			Handler:    _Puppet_ContactPhone_Handler,
		},
		{
			MethodName: "ContactCorporationRemark",
			Handler:    _Puppet_ContactCorporationRemark_Handler,
		},
		{
			MethodName: "ContactDescription",
			Handler:    _Puppet_ContactDescription_Handler,
		},
		{
			MethodName: "ContactList",
			Handler:    _Puppet_ContactList_Handler,
		},
		{
			MethodName: "FriendshipPayload",
			Handler:    _Puppet_FriendshipPayload_Handler,
		},
		{
			MethodName: "FriendshipSearchPhone",
			Handler:    _Puppet_FriendshipSearchPhone_Handler,
		},
		{
			MethodName: "FriendshipSearchWeixin",
			Handler:    _Puppet_FriendshipSearchWeixin_Handler,
		},
		{
			MethodName: "FriendshipAdd",
			Handler:    _Puppet_FriendshipAdd_Handler,
		},
		{
			MethodName: "FriendshipAccept",
			Handler:    _Puppet_FriendshipAccept_Handler,
		},
		{
			MethodName: "MessageFile",
			Handler:    _Puppet_MessageFile_Handler,
		},
		{
			MethodName: "MessageImage",
			Handler:    _Puppet_MessageImage_Handler,
		},
		{
			MethodName: "MessageSendFile",
			Handler:    _Puppet_MessageSendFile_Handler,
		},
		{
			MethodName: "MessagePayload",
			Handler:    _Puppet_MessagePayload_Handler,
		},
		{
			MethodName: "MessageContact",
			Handler:    _Puppet_MessageContact_Handler,
		},
		{
			MethodName: "MessageMiniProgram",
			Handler:    _Puppet_MessageMiniProgram_Handler,
		},
		{
			MethodName: "MessageUrl",
			Handler:    _Puppet_MessageUrl_Handler,
		},
		{
			MethodName: "MessageSendContact",
			Handler:    _Puppet_MessageSendContact_Handler,
		},
		{
			MethodName: "MessageSendText",
			Handler:    _Puppet_MessageSendText_Handler,
		},
		{
			MethodName: "MessageSendMiniProgram",
			Handler:    _Puppet_MessageSendMiniProgram_Handler,
		},
		{
			MethodName: "MessageSendUrl",
			Handler:    _Puppet_MessageSendUrl_Handler,
		},
		{
			MethodName: "MessageRecall",
			Handler:    _Puppet_MessageRecall_Handler,
		},
		{
			MethodName: "RoomPayload",
			Handler:    _Puppet_RoomPayload_Handler,
		},
		{
			MethodName: "RoomList",
			Handler:    _Puppet_RoomList_Handler,
		},
		{
			MethodName: "RoomAdd",
			Handler:    _Puppet_RoomAdd_Handler,
		},
		{
			MethodName: "RoomAvatar",
			Handler:    _Puppet_RoomAvatar_Handler,
		},
		{
			MethodName: "RoomCreate",
			Handler:    _Puppet_RoomCreate_Handler,
		},
		{
			MethodName: "RoomDel",
			Handler:    _Puppet_RoomDel_Handler,
		},
		{
			MethodName: "RoomQuit",
			Handler:    _Puppet_RoomQuit_Handler,
		},
		{
			MethodName: "RoomTopic",
			Handler:    _Puppet_RoomTopic_Handler,
		},
		{
			MethodName: "RoomQRCode",
			Handler:    _Puppet_RoomQRCode_Handler,
		},
		{
			MethodName: "RoomAnnounce",
			Handler:    _Puppet_RoomAnnounce_Handler,
		},
		{
			MethodName: "RoomMemberPayload",
			Handler:    _Puppet_RoomMemberPayload_Handler,
		},
		{
			MethodName: "RoomMemberList",
			Handler:    _Puppet_RoomMemberList_Handler,
		},
		{
			MethodName: "RoomInvitationPayload",
			Handler:    _Puppet_RoomInvitationPayload_Handler,
		},
		{
			MethodName: "RoomInvitationAccept",
			Handler:    _Puppet_RoomInvitationAccept_Handler,
		},
		{
			MethodName: "TagContactAdd",
			Handler:    _Puppet_TagContactAdd_Handler,
		},
		{
			MethodName: "TagContactRemove",
			Handler:    _Puppet_TagContactRemove_Handler,
		},
		{
			MethodName: "TagContactDelete",
			Handler:    _Puppet_TagContactDelete_Handler,
		},
		{
			MethodName: "TagContactList",
			Handler:    _Puppet_TagContactList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Event",
			Handler:       _Puppet_Event_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessageFileStream",
			Handler:       _Puppet_MessageFileStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessageImageStream",
			Handler:       _Puppet_MessageImageStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessageSendFileStream",
			Handler:       _Puppet_MessageSendFileStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "puppet.proto",
}
